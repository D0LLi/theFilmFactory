{"version":3,"sources":["components/Header.js","components/ErrorMessage.js","components/LoadingPage.js","components/Search.js","firebase.js","components/FilmPair.js","components/CurrentPair.js","components/Pairs.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","Component","ErrorMessage","updateHasErrorState","className","type","onClick","icon","faTimesCircle","LoadingPage","Search","props","handleChange","event","searchedMovie","target","value","setState","userTextInput","handleSubmit","foreignFilms","preventDefault","axios","url","params","api_key","query","state","language","include_adult","then","response","newEnglishFilms","data","results","forEach","obj","push","englishFilms","filter","object","original_language","poster_path","slice","catch","error","length","hasError","onEnglishFilmClick","a","isLoading","movieId","currentTarget","englishFilmsCopy","englishFilm","find","id","parseInt","updateEnglishFilmState","totalPages","i","page","total_pages","some","film","onForeignFilmClick","foreignFilm","updateForeignFilmState","onSubmit","this","onChange","placeholder","map","key","src","alt","original_title","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FilmPair","pair","title","release_date","class","vote_average","overview","CurrentPair","savePair","database","ref","Pairs","filmPairs","on","newState","val","entry","reverse","filmPair","Footer","href","aria-label","faGithub","App","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.643e21d3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/Header.scss';\n\nclass Header extends Component {\n\n  render() {\n\n    return (\n      <header>\n        <h1>The Film Factory</h1>\n      </header>\n    )\n\n  }\n\n}\n\nexport default Header;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons'\nimport '../styles/errorMessage.scss';\n\nconst ErrorMessage = ({updateHasErrorState}) => {\n  return (\n    <div className='errorMessage'>\n      <p>Something went wrong,</p>\n      <p>please try again.</p>\n      <button type='button' onClick={updateHasErrorState}><FontAwesomeIcon icon={faTimesCircle}/></button>\n    </div>\n  )\n}\n\nexport default ErrorMessage;","import React from 'react';\nimport '../styles/errorMessage.scss';\n\nconst LoadingPage = () => {\n  return (\n    <div className='loadingPage'>\n      <p>Searching database...</p>\n    </div>\n  )\n}\n\nexport default LoadingPage;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport ErrorMessage from './ErrorMessage';\nimport LoadingPage from './LoadingPage';\nimport '../styles/Search.scss';\n\nclass Search extends Component {\n\n\n  // text input has onChange handler connecting it to userInput in state\n  // componentDidMount\n  // 1st Axios -> wait until this returns \n  //  -This will take the user Input and will query the endpoint\n  //  -Return an array of objects (each representing a film)\n  //  -Display a list of movies (~10 results)\n  //    -Movie posters\n  //  -User can choose the correct movie \n  //    -Click Event\n  // 2nd Axios\n  //  -use englishFilm's id to make 2nd call\n  //  -while loop until foreignFilms array reaches 20 films \n  //    -page counter\n  //    -return array of foreignFilm objects\n  //  -display list of foreign films (posters)\n  //    -each with a click event\n  //  -user selects a foreign film\n  //    -creates a pair of English film and Foreign film \n  //    -This is placed in Firebase \n  // \n  //  \n\n  constructor(props) {\n    super(props);\n    this.state = {\n      userTextInput: '',\n      englishFilms: [],\n      foreignFilms: [],\n      isLoading: '',\n      hasError: false,\n    }\n  }\n\n  // function tracking the user's input\n  handleChange = (event) => {\n    const searchedMovie = event.target.value;\n    this.setState({\n      userTextInput: searchedMovie,\n    });\n  }\n\n  // function to execute on form submit\n  handleSubmit = (event) => {\n    this.setState({\n      foreignFilms: [],\n    });\n    \n    event.preventDefault();\n    axios({\n      url: 'https://api.themoviedb.org/3/search/movie',\n      params: {\n        api_key: '7e436244a51ab62563e1dbbb6bb31f24',\n        query: this.state.userTextInput,\n        language: 'en-US',\n        include_adult: false,\n      }\n    }).then( response => {\n\n      let newEnglishFilms = [];\n\n      // push each film data object to the newEnglishFilms array\n      response.data.results.forEach(obj => {\n        newEnglishFilms.push(obj);\n      });\n\n      // filter newEnglishFilms array for english language films that have a poster and store it in the englishFilms variable\n      let filteredEnglishFilms = newEnglishFilms.filter(object => object.original_language = 'en').filter(object => object.poster_path);\n\n      // grab only the first ten films and store it in the englishFilms variable\n      let englishFilms = filteredEnglishFilms.slice(0, 10);\n      \n      // update the englishFilms state to have the 10 filtered film data objects\n      this.setState({\n        englishFilms,\n      });\n    }).catch( error => {\n      if (error && !this.state.englishFilms.length) {\n        this.setState({\n          hasError: true,\n        });\n      }\n    });\n  }\n\n  // function to execute on click of english film poster\n  onEnglishFilmClick = async (event) => {\n    this.setState({\n      isLoading: true,\n    });\n\n    const movieId = event.currentTarget.value;\n\n    const englishFilmsCopy = [...this.state.englishFilms];\n    // goes through the array to find the object holding the selected movie's id and store it in the englishFilm variable\n    \n    const englishFilm = englishFilmsCopy.find( object => object.id === parseInt(movieId));\n\n    // function from App.js to update the englishFilm state\n    this.props.updateEnglishFilmState(englishFilm);\n\n    let foreignFilms = [];\n    let totalPages = 1000;\n\n    for (let i = 1; i <= totalPages && foreignFilms.length < 20; i++) {\n      // second axios call\n      await axios({\n        url: `https://api.themoviedb.org/3/movie/${movieId}/similar`,\n        params: {\n          api_key: '7e436244a51ab62563e1dbbb6bb31f24',\n          page: i,\n        }\n      }).then( response => {\n        totalPages = response.data.total_pages;\n        \n        // const similarFilms = [];\n\n        // push the data objects for each film to the similarFilms array\n        response.data.results.forEach( object => {\n          if (object.original_language !== 'en' && object.poster_path && !foreignFilms.some( film => film.id === object.id) && foreignFilms.length < 20) {\n            foreignFilms.push(object);\n          }\n        });\n      }).catch( error => {\n        if (error && !this.state.foreignFilms.length) {\n          this.setState({\n            hasError: true,\n          });\n        }\n      });\n    }\n\n    // update the foreignFilms state with the filtered array\n    this.setState({\n      foreignFilms,\n      isLoading: false,\n    });\n  }\n\n  // function to execute on foreign film selection\n  onForeignFilmClick = (event) => {\n\n    // store the movie id in a variable\n    const movieId = event.currentTarget.value;\n\n    const foreignFilmsCopy = [...this.state.foreignFilms];\n\n    // goes through the array to find the object holding the selected movie's id and store it in the foreignFilm variable\n    const foreignFilm = foreignFilmsCopy.find( object => object.id === parseInt(movieId));\n    \n    // function from App.js to update the foreignFilm state\n    this.props.updateForeignFilmState(foreignFilm);\n  }\n\n  updateHasErrorState = () => {\n    this.setState({\n      hasError: false,\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <form onSubmit={this.handleSubmit}>\n          <input type='text' value={this.state.userTextInput} onChange={this.handleChange} placeholder='Enter Movie' />\n          <input type='submit' value='Search' />\n        </form>\n\n        {/* section to display the English films */}\n        <section className='englishFilms'>\n          <h2>Results for \"{this.state.userTextInput}\"</h2>\n          <ul className='gridContainer'>\n            {\n              this.state.englishFilms.map( object => {\n                return (\n                  <li key={object.id}>\n                    <button type='button' value={object.id} onClick={this.onEnglishFilmClick}><img src={`http://image.tmdb.org/t/p/w500/${object.poster_path}`} alt={object.original_title}/></button>\n                  </li>\n                )\n              })\n            }\n          </ul>\n        </section>\n        {\n          this.state.isLoading\n          ? <LoadingPage />\n          : <section className='foreignFilms'>\n              <h2>Foreign film recommendations based on your English film selection:</h2>\n              <ul className='gridContainer'>\n                {\n                  this.state.foreignFilms.map( object => {\n                    return (\n                      <li key={object.id}>\n                        <button type='button' value={object.id} onClick={this.onForeignFilmClick}><img src={`http://image.tmdb.org/t/p/w500/${object.poster_path}`} alt={object.original_title}/></button>\n                      </li>\n                    )\n                  })\n                }\n              </ul>\n            </section>\n        }\n\n        {this.state.hasError ? <ErrorMessage updateHasErrorState={this.updateHasErrorState}/> : null}\n      </Fragment>\n    )\n  }\n}\n\nexport default Search;","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCfGmCQDVUrS-k2pZRPTEJtikizGn3PSRs\",\n  authDomain: \"thefilmfactory-1e3dd.firebaseapp.com\",\n  databaseURL: \"https://thefilmfactory-1e3dd.firebaseio.com\",\n  projectId: \"thefilmfactory-1e3dd\",\n  storageBucket: \"thefilmfactory-1e3dd.appspot.com\",\n  messagingSenderId: \"892695161812\",\n  appId: \"1:892695161812:web:34c97f278acddb7cec4441\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Component } from \"react\";\n\nimport \"../filmpair.css\";\n\nimport '../styles/FilmPair.scss';\n\n\nclass FilmPair extends Component {\n\n  \n  render() {\n\n    const {englishFilm, foreignFilm} = this.props.pair\n\n    return (\n      <section className=\"wrapper\">\n      <ul className=\"pair\">\n        <li className=\"film-flex\">\n          <div className=\"pair-info\">\n            <h3>{englishFilm.title}</h3>\n            <p className=\"date\">{englishFilm.release_date.slice(0, 4)}</p>\n            <p><i class=\"fas fa-star\"></i> {englishFilm.vote_average}/10</p>\n            <p>{englishFilm.overview}</p>\n          </div>\n          <div className=\"pair-poster\">\n            <img\n              src={`http://image.tmdb.org/t/p/w500/${englishFilm.poster_path}`}\n              alt={`Movie poster for ${englishFilm.title}`}\n            />\n          </div>\n        </li>\n        \n        <li className=\"film-flex\">\n          <div className=\"pair-info\">\n            <h3>{foreignFilm.title}</h3>\n            <p className=\"date\">{foreignFilm.release_date.slice(0, 4)}</p>\n            <p><i class=\"fas fa-star\"></i> {foreignFilm.vote_average}/10</p>\n            <p>{foreignFilm.overview}</p>\n          </div>\n          <div className=\"pair-poster\">\n            <img\n              src={`http://image.tmdb.org/t/p/w500/${foreignFilm.poster_path}`}\n              alt={`Movie poster for ${foreignFilm.title}`}\n            />\n          </div>\n        </li>\n        {/* <li className=\"film-flex\">\n          <div className=\"pair-info\">\n            <h3>{foreignFilm.title}</h3>\n            <p className=\"date\">{foreignFilm.release_date.slice(0, 4)}</p>\n            <p><i class=\"fas fa-star\"></i> {foreignFilm.vote_average}/10</p>\n            <p>{foreignFilm.overview}</p>\n          </div>\n          <div className=\"pair-poster\">\n            <img\n              src={`http://image.tmdb.org/t/p/w500/${foreignFilm.poster_path}`}\n              alt={`Movie poster for ${foreignFilm.title}`}\n            />\n          </div>\n        </li> */}\n      </ul>\n      </section>\n    );\n  }\n}\n\nexport default FilmPair;","import React, { Component, Fragment } from 'react';\nimport '../styles/CurrentPair.scss';\nimport firebase from '../firebase';\nimport FilmPair from './FilmPair';\n\nclass CurrentPair extends Component {\n\n  // SAVE PAIR FUNCTION - Adds film pair to database\n  // Event Listener connected to Save Pair button\n  savePair = () => {\n\n    const dbRef = firebase.database().ref();\n\n    // Adds film pair object to database\n    dbRef.push({\n      englishFilm: this.props.englishFilm,\n      foreignFilm: this.props.foreignFilm\n    });\n\n  }\n\n  render() {\n\n    // Creates a pair object, which is the necessary format for the FilmPair component to receive\n    const pair = {\n      englishFilm: this.props.englishFilm,\n      foreignFilm: this.props.foreignFilm\n    }\n\n    return (\n      <Fragment>\n\n        <h3>Film Pairing</h3>\n        <p>If you liked that film, you might like this one...</p>\n        <FilmPair pair={pair}/>\n        <button onClick={this.savePair}>Save Pair</button>\n\n      </Fragment>\n    )\n\n  }\n\n}\n\nexport default CurrentPair;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport '../styles/Pairs.scss';\nimport firebase from '../firebase';\nimport FilmPair from './FilmPair';\n\nclass Pairs extends Component {\n  // displaying the pairs in a list\n  //   will listen everytime the database is altered\n  constructor() {\n    super();\n    this.state = {\n      filmPairs: [],\n    };\n  }\n\n  // Event Handler for adding practice data to database - CAN BE DELETED EVENTUALLY\n  // handleClick = (event) => {\n  //   // event.preventDefault()\n  //   axios({\n  //     url: `https://api.themoviedb.org/3/movie/308/similar`,\n  //     params: {\n  //       api_key: \"ac8a1621bd544ad33438bf381952729f\",\n  //     },\n  //   }).then((response) => {\n  //     const filmPair = {\n  //       englishFilm: response.data.results[0],\n  //       foreignFilm: response.data.results[1],\n  //     };\n\n  //     const dbRef = firebase.database().ref();\n\n  //     dbRef.push(filmPair);\n  //   });\n  // };\n\n\n\n  componentDidMount() {\n    // create a variable to store a reference to our database\n    const dbRef = firebase.database().ref();\n    // Constantly monitor what values are in the database, and when something changes, run callback function\n    dbRef.on(\"value\", (response) => {\n      // 1. a) Make copy of State\n      const newState = [];\n      // 1. b) Get information from database\n      const data = response.val();\n      // 2. Make changes to copy of State\n      // Include id property for key attribute when mapping out multiple FilmPair components\n      for (let entry in data) {\n        newState.push({\n          pair: data[entry],\n          id: entry\n        });\n      }\n      // 2. b) Reverse copy of State, so newest entries are display first\n      const reverseState = newState.reverse();\n\n      // 3. Set State with changed copy\n      this.setState({ filmPairs: newState });\n    });\n  }\n\n\n  render() {\n    return (\n      <section>\n        {/* Button used to add practice data to database. CAN BE DELETED EVENTUALLY */}\n        {/* <button onClick={this.handleClick}>Click Me</button> */}\n        <h2>Movies To Watch</h2>\n        <ul>\n          {this.state.filmPairs.map((filmPair) => {\n           return <FilmPair pair={filmPair.pair} key={filmPair.id}/>\n          })}\n        </ul>\n      </section>\n    );\n  }\n}\n\nexport default Pairs;\n\n\n","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// https://github.com/FortAwesome/react-fontawesome\nimport { faTwitter, faGithub } from '@fortawesome/free-brands-svg-icons';\nimport '../styles/Footer.scss';\n\n// Everyone will need to install these dependencies\n// npm i--save @fortawesome/fontawesome-svg-core\n// npm i--save @fortawesome/free-solid-svg-icons\n// npm i--save @fortawesome/react-fontawesome\n// npm i--save @fortawesome/free-brands-svg-icons\n\nclass Footer extends Component {\n\n  render() {\n\n    return (\n      <footer>\n        <section className=\"attributions\">\n          <p>All films provided by <a href=\"https://www.themoviedb.org/documentation/api\">The Movie DB API</a></p>\n          <p>All icons provided by <a href=\"https://fontawesome.com/license\">Font Awesome</a></p>\n        </section>\n\n        <section className=\"team-info\">\n\n          <p>Made with <span aria-label=\"love\">♥</span> by The Film Four</p>\n          <ul className=\"team-members\">\n            <ul className=\"team-member\">\n              <li>Cheriele</li>\n              <li>\n                <a href=\"https://github.com/csmordido\" title=\"Click to access Cheriele's Github page\" target=\"_blank\">\n                  <FontAwesomeIcon \n                    icon={faGithub}\n                  />\n                </a>\n              </li>\n            </ul>\n            <ul>\n              <li>Melissa</li>\n              <li>\n                <a href=\"https://github.com/mel-ahls\" title=\"Click to access Melissa's Github page\" target=\"_blank\">\n                  <FontAwesomeIcon\n                    icon={faGithub}\n                  />\n                </a>\n              </li>\n            </ul>\n            <ul>\n              <li>Robert</li>\n              <li>\n                <a href=\"https://github.com/rduhig\" title=\"Click to access Robert's Github page\" target=\"_blank\">\n                  <FontAwesomeIcon\n                    icon={faGithub}\n                  />\n                </a>\n              </li>\n            </ul>\n            <ul>\n              <li>Taylor</li>\n              <li>\n                <a href=\"https://github.com/QuercusTaliare\" title=\"Click to access Taylor's Github page\" target=\"_blank\">\n                  <FontAwesomeIcon\n                    icon={faGithub}\n                  />\n                </a>\n              </li>\n            </ul>\n            \n          </ul>\n        </section>\n      </footer>\n    )\n\n  }\n\n}\n\nexport default Footer;","import React, { Component } from 'react';\n\nimport './styles/setup.scss';\nimport './styles/global.scss';\nimport './styles/fontsAndColours.scss';\n\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport CurrentPair from './components/CurrentPair';\nimport Pairs from \"./components/Pairs\";\nimport Footer from \"./components/Footer\";\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.state = {\n      englishFilm: {},\n      foreignFilm: {},\n    }\n  }\n\n  // function passed as props to the Search component to update the englishFilm state\n  updateEnglishFilmState = (data) => {\n    this.setState({\n      englishFilm: data,\n    });\n  }\n\n  // function passed as props to the Search component to update the foreignFilm state\n  updateForeignFilmState = (data) => {\n    this.setState({\n      foreignFilm: data,\n    });\n  }\n\n  render() {\n    return (\n      <div className='wrapper'>\n        <Header />\n\n        <main>\n          <Search updateEnglishFilmState={this.updateEnglishFilmState} updateForeignFilmState={this.updateForeignFilmState} />\n          { // The CurrentPair component will not be rendered unless the englishFilm and foreignFilm objects in state have something inside\n            (Object.keys(this.state.englishFilm).length !== 0 && Object.keys(this.state.foreignFilm).length !== 0)\n              ? <CurrentPair englishFilm={this.state.englishFilm} foreignFilm={this.state.foreignFilm} />\n              : null\n          }\n          <Pairs />\n        </main>\n        \n        <Footer />\n\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}