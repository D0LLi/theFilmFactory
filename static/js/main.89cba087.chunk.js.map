{"version":3,"sources":["assets/film-reel.svg","components/Header.js","components/ErrorMessage.js","components/LoadingPage.js","components/Modal.js","components/Search.js","firebase.js","components/FilmPair.js","components/CurrentPair.js","components/Pairs.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","type","onClick","this","props","scrollToSearch","Component","ErrorMessage","updateHasErrorState","icon","faTimesCircle","LoadingPage","src","filmReel","alt","Modal","film","closeFilmModal","selectFilm","poster_path","title","original_title","release_date","slice","faStar","vote_average","overview","Search","scrollToFilms","window","scrollTo","filmsRef","current","offsetTop","displayFilmModal","isForeign","setState","modal","display","handleChange","event","searchQuery","target","value","userTextInput","handleSubmit","a","preventDefault","foreignFilms","isLoading","englishFilms","axios","url","params","api_key","query","state","language","include_adult","then","response","data","results","forEach","original_language","length","push","catch","error","hasError","selectEnglishFilm","englishFilm","filmId","id","updateEnglishFilmState","updateForeignFilmState","i","totalPages","page","some","obj","total_pages","selectForeignFilm","foreignFilm","React","createRef","onSubmit","ref","SearchRef","onChange","placeholder","map","key","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","FilmPair","pair","toLowerCase","CurrentPair","savePair","database","savePairActive","scrollToCurrentPair","CurrentPairRef","scrollToPairs","Pairs","filmPairs","on","newState","val","entry","reverse","PairsRef","filmPair","Footer","aria-label","href","faGithub","faTwitter","App","filmObj","Object","keys","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.89cba087.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/film-reel.a06dd543.svg\";","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <header>\r\n        <div className='welcome'>\r\n          <h1>\r\n            The Film\r\n            <br /> Factory\r\n          </h1>\r\n          <button className='scroll shadow' type='button' onClick={this.props.scrollToSearch}>Find Your Movie Match</button>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\n\r\n/**\r\n * TODO Complete this description\r\n * Why is the parameter in an object?\r\n * \r\n * @param {*} param0 \r\n */\r\nconst ErrorMessage = ({updateHasErrorState}) => {\r\n  return (\r\n    <div className='error-message'>\r\n      <div className='main-content'>\r\n        <p>Something went wrong,</p>\r\n        <p>please try again.</p>\r\n        <button type='button' onClick={updateHasErrorState}><FontAwesomeIcon icon={faTimesCircle}/></button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\nimport filmReel from '../assets/film-reel.svg'\r\n\r\n/**\r\n * Returns the HTML for the loading page\r\n */\r\nconst LoadingPage = () => {\r\n  return (\r\n    <div className='loading-page'>\r\n      <div className='main-content'>\r\n        <img src={filmReel} alt=\"spinning film reel\"/>\r\n        <p>Searching database...</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingPage;\r\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimesCircle, faStar } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass Modal extends Component {\r\n  render() {\r\n    const { film, closeFilmModal, selectFilm } = this.props;\r\n\r\n    return (\r\n      <div className='container'>\r\n        <div className='overlay'>\r\n          <div className='modal'>\r\n            <div>\r\n              <img src={`http://image.tmdb.org/t/p/w500/${film.poster_path}`} alt={`Poster for the movie ${film.title}`} />\r\n            </div>\r\n            <div className='modal-info'>\r\n              <button className='close' type='button' onClick={closeFilmModal}><FontAwesomeIcon icon={faTimesCircle} /></button>\r\n              <h2>{film.title}</h2>\r\n              { film.title !== film.original_title && <h4>{film.original_title}</h4> }\r\n              <p className=\"date\">{film.release_date.slice(0, 4)}</p>\r\n              <p><FontAwesomeIcon icon={faStar} /> {film.vote_average}/10</p>\r\n              <p>{film.overview}</p>\r\n              <button className='select shadow' type='button' onClick={selectFilm}>Select this movie</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ErrorMessage from './ErrorMessage';\r\nimport LoadingPage from './LoadingPage';\r\nimport Modal from './Modal';\r\n\r\nclass Search extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userTextInput: '',\r\n      englishFilms: [],\r\n      foreignFilms: [],\r\n      totalPages: 0,\r\n      isLoading: '',\r\n      hasError: false,\r\n      modal: {\r\n        film: {},\r\n        isForeign: false,\r\n        display: false\r\n      }\r\n    };\r\n\r\n    this.filmsRef = React.createRef();\r\n  }\r\n\r\n  scrollToFilms = () => {\r\n    window.scrollTo(0, this.filmsRef.current.offsetTop)\r\n  }\r\n\r\n  /**\r\n   * Displays a modal containing information about the selected film\r\n   * \r\n   * @param {Object} film The selected film Object\r\n   * @param {boolean} isForeign True if the selected film is foreign, false otherwise\r\n   */\r\n  displayFilmModal = (film, isForeign = false) => {\r\n    this.setState({\r\n      modal: {\r\n        film: film,\r\n        isForeign: isForeign,\r\n        display: true\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Closes the film information modal\r\n   */\r\n  closeFilmModal = () => {\r\n    this.setState({ modal: { display: false } });\r\n  };\r\n\r\n  /**\r\n   * Sets the state to contain the user text input\r\n   * \r\n   * @param {Event} event The Event occurring when the text input changes\r\n   */\r\n  handleChange = (event) => {\r\n    const searchQuery = event.target.value;\r\n    this.setState({ userTextInput: searchQuery });\r\n  };\r\n\r\n  /**\r\n   * Queries the API for movies similar to the English language movie the user entered\r\n   * \r\n   * @param {Event} event The Event occurring when the user submits their search query\r\n   */\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({ foreignFilms: [], isLoading: true });\r\n    let englishFilms = [];\r\n\r\n    await axios({\r\n      url: 'https://api.themoviedb.org/3/search/movie',\r\n      params: {\r\n        api_key: '7e436244a51ab62563e1dbbb6bb31f24',\r\n        query: this.state.userTextInput,\r\n        language: 'en-US',\r\n        include_adult: false,\r\n      }\r\n    }).then( response => {\r\n      response.data.results.forEach( film => {\r\n        if (film.original_language === 'en' && film.poster_path && englishFilms.length < 10) {\r\n          englishFilms.push(film);\r\n        }\r\n      });\r\n\r\n      // Scrolls to the list of English films\r\n      this.scrollToFilms();\r\n\r\n    }).catch( error => {\r\n      if (error && !this.state.englishFilms.length) {\r\n        this.setState({ hasError: true });\r\n      }\r\n    });\r\n\r\n    this.setState({ userTextInput: '', englishFilms, isLoading: false });\r\n\r\n  };\r\n  \r\n  /**\r\n   * Updates the state to contain the selected English language film and queries the API\r\n   * for similar foreign language films\r\n   */\r\n  selectEnglishFilm = async () => {\r\n    this.closeFilmModal();\r\n    this.setState({ isLoading: true });\r\n    const englishFilm = this.state.modal.film;\r\n    const filmId = this.state.modal.film.id;\r\n    this.props.updateEnglishFilmState(englishFilm);\r\n    // Error handling: If user selects an English Film, then selects a Foreign Film, and then re-selects an English film, this will make sure the CurrentPair is not rendering until another ForeignFilm has been selected (CurrentPair won't render until both englishFilm and foreignFilm are populated in App's state)\r\n    this.props.updateForeignFilmState({});\r\n    let foreignFilms = [];\r\n\r\n    for (let i = 0; i <= this.state.totalPages && foreignFilms.length < 20; i++) {\r\n      await axios({\r\n        url: `https://api.themoviedb.org/3/movie/${filmId}/similar`,\r\n        params: {\r\n          api_key: '7e436244a51ab62563e1dbbb6bb31f24',\r\n          page: i + 1\r\n        }\r\n      }).then( response => {\r\n        response.data.results.forEach( film => {\r\n          if (film.original_language !== 'en' && film.poster_path && !foreignFilms.some( obj => obj.id === film.id) && foreignFilms.length < 20) {\r\n            foreignFilms.push(film);\r\n          }\r\n        });\r\n        const totalPages = response.data.total_pages;\r\n        this.setState({ totalPages });\r\n      }).catch( error => {\r\n        if (error && !this.state.foreignFilms.length) {\r\n          this.setState({ hasError: true, totalPages: 0 });\r\n        }\r\n      });\r\n    }\r\n    this.setState({ foreignFilms, englishFilms: [], isLoading: false });\r\n  };\r\n\r\n  /**\r\n   * Updates the state to contain the selected foreign language film\r\n   */\r\n  selectForeignFilm = () => {\r\n    this.closeFilmModal();\r\n    const foreignFilm = this.state.modal.film;\r\n    this.props.updateForeignFilmState(foreignFilm);\r\n    this.setState({ foreignFilms: [] })\r\n  };\r\n\r\n  /**\r\n   * Updates the state when there are no current errors\r\n   */\r\n  updateHasErrorState = () => {\r\n    this.setState({ hasError: false, totalPages: 0 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='wrapper'>\r\n        {\r\n          this.state.modal.display\r\n          && <Modal\r\n            film={this.state.modal.film}\r\n            closeFilmModal={this.closeFilmModal}\r\n            selectFilm={this.state.modal.isForeign ? this.selectForeignFilm : this.selectEnglishFilm}\r\n          />\r\n        }\r\n        { this.state.isLoading && <LoadingPage /> }\r\n        <form onSubmit={this.handleSubmit} ref={this.props.SearchRef}>\r\n          <input type='text' value={this.state.userTextInput} onChange={this.handleChange} placeholder='Enter Movie' />\r\n          <input type='submit' value='Search' />\r\n        </form>\r\n        <section className='films' ref={this.filmsRef}>\r\n          {\r\n            this.state.foreignFilms.length\r\n            ? <h2>If you liked {this.props.englishFilm.title}, then maybe you'll like...</h2>\r\n            : this.state.englishFilms.length\r\n            ? <h2>Did you mean...</h2>\r\n            : null\r\n          }\r\n          <ul className='grid-container'>\r\n            {\r\n              this.state.foreignFilms.length\r\n              ? this.state.foreignFilms.map( film => {\r\n                return (\r\n                  <li key={film.id}>\r\n                    <button\r\n                      className=\"shadow\"\r\n                       type=\"button\"\r\n                      onClick={() => this.displayFilmModal(film, true)}\r\n                    >\r\n                      <img\r\n                        src={`http://image.tmdb.org/t/p/w500/${film.poster_path}`}\r\n                        alt={`Poster for the movie ${film.title}`}\r\n                      />\r\n                    </button>\r\n                  </li>\r\n                );\r\n              })\r\n              : this.state.englishFilms.map( film => {\r\n                return (\r\n                  <li key={film.id}>\r\n                    <button className=\"shadow\" type='button' onClick={() => this.displayFilmModal(film)}><img src={`http://image.tmdb.org/t/p/w500/${film.poster_path}`} alt={`Poster for the movie ${film.title}`} /></button>\r\n                  </li>\r\n                );\r\n              })\r\n            }\r\n          </ul>\r\n        </section>\r\n        { this.state.hasError && <ErrorMessage updateHasErrorState={this.updateHasErrorState} /> }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCfGmCQDVUrS-k2pZRPTEJtikizGn3PSRs\",\r\n  authDomain: \"thefilmfactory-1e3dd.firebaseapp.com\",\r\n  databaseURL: \"https://thefilmfactory-1e3dd.firebaseio.com\",\r\n  projectId: \"thefilmfactory-1e3dd\",\r\n  storageBucket: \"thefilmfactory-1e3dd.appspot.com\",\r\n  messagingSenderId: \"892695161812\",\r\n  appId: \"1:892695161812:web:34c97f278acddb7cec4441\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faStar } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass FilmPair extends Component {\r\n  \r\n  render() {\r\n    const { englishFilm, foreignFilm } = this.props.pair;\r\n\r\n    return (\r\n      <li className='pair-block'>\r\n        <ul className='pair wrapper'>\r\n          <li className='film-flex'>\r\n            <div className='pair-info english'>\r\n              <h3>{englishFilm.title}</h3>\r\n              {englishFilm.title.toLowerCase() !==\r\n                englishFilm.original_title.toLowerCase() && (\r\n                <h4>{englishFilm.original_title}</h4>\r\n              )}\r\n              <p className='date'>{englishFilm.release_date.slice(0, 4)}</p>\r\n              <p className='rating'>\r\n                <FontAwesomeIcon icon={faStar} /> {englishFilm.vote_average}/10\r\n              </p>\r\n              <p className='overview'>{englishFilm.overview}</p>\r\n            </div>\r\n            <div className='pair-poster'>\r\n              <img\r\n                src={`http://image.tmdb.org/t/p/w500/${englishFilm.poster_path}`}\r\n                alt={`Movie poster for ${englishFilm.title}`}\r\n              />\r\n            </div>\r\n          </li>\r\n\r\n          <li className='film-flex'>\r\n            <div className='pair-info'>\r\n              <h3>{foreignFilm.title}</h3>\r\n              {foreignFilm.title.toLowerCase() !==\r\n                foreignFilm.original_title.toLowerCase() && (\r\n                <h4>{foreignFilm.original_title}</h4>\r\n              )}\r\n              <p className='date'>{foreignFilm.release_date.slice(0, 4)}</p>\r\n              <p className='rating'>\r\n                <FontAwesomeIcon icon={faStar} /> {foreignFilm.vote_average}/10\r\n              </p>\r\n              <p className='overview'>{foreignFilm.overview}</p>\r\n            </div>\r\n            <div className='pair-poster'>\r\n              <img\r\n                src={`http://image.tmdb.org/t/p/w500/${foreignFilm.poster_path}`}\r\n                alt={`Movie poster for ${foreignFilm.title}`}\r\n              />\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FilmPair;\r\n","import React, { Component, Fragment } from 'react';\r\nimport firebase from '../firebase';\r\nimport FilmPair from './FilmPair';\r\n\r\nclass CurrentPair extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      savePairActive: true \r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a film pair object to the database\r\n   * Connected to an event listener on the Save Pair button\r\n  */\r\n  savePair = () => {\r\n\r\n    const dbRef = firebase.database().ref();\r\n\r\n    // Adds film pair object to database\r\n    dbRef.push({\r\n      englishFilm: this.props.englishFilm,\r\n      foreignFilm: this.props.foreignFilm\r\n    });\r\n\r\n    this.setState({ savePairActive: false });\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    // Makes the Save Pair button clickable\r\n    this.setState({ savePairActive: true });\r\n\r\n    // Scrolls the Window to the CurrentPair component\r\n    this.props.scrollToCurrentPair();\r\n\r\n  }\r\n\r\n  render() {\r\n    // Creates a pair object, which is the necessary format for the FilmPair component to receive\r\n    const pair = {\r\n      englishFilm: this.props.englishFilm,\r\n      foreignFilm: this.props.foreignFilm\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className='wrapper film-pair-header'>\r\n          <h3 ref={this.props.CurrentPairRef}>Film Pairing</h3>\r\n          <p>If you liked that film, you might like this one...</p>\r\n        </div>\r\n        <FilmPair pair={pair}/>\r\n        <div className='wrapper'>\r\n          <div className='film-pair-buttons'>\r\n            <button\r\n              onClick={() => { this.savePair(); this.props.scrollToPairs() }}\r\n              className={ this.state.savePairActive ? 'save-pair active shadow' : 'save-pair disabled' }\r\n            >Save Pair</button>\r\n            <button className='shadow' onClick={() => { this.props.scrollToSearch() }}>Search Again</button>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CurrentPair;\r\n","import React, { Component } from 'react';\r\nimport firebase from '../firebase';\r\nimport FilmPair from './FilmPair';\r\n\r\nclass Pairs extends Component {\r\n  // displaying the pairs in a list\r\n  //   will listen everytime the database is altered\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      filmPairs: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // create a variable to store a reference to our database\r\n    const dbRef = firebase.database().ref();\r\n    // Constantly monitor what values are in the database, and when something changes, run callback function\r\n    dbRef.on(\"value\", (response) => {\r\n      // 1. a) Make copy of State\r\n      const newState = [];\r\n      // 1. b) Get information from database\r\n      const data = response.val();\r\n      // 2. Make changes to copy of State\r\n      // Include id property for key attribute when mapping out multiple FilmPair components\r\n      for (let entry in data) {\r\n        newState.push({\r\n          pair: data[entry],\r\n          id: entry\r\n        });\r\n      }\r\n      // 2. b) Reverse copy of State, so newest entries are display first\r\n      newState.reverse();\r\n\r\n      // 3. Set State with changed copy\r\n      this.setState({ filmPairs: newState });\r\n    });\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className='pairs' ref={this.props.PairsRef}>\r\n        <div className='wrapper'>\r\n          <h2>Movies To Watch</h2>\r\n        </div>\r\n        <ul>\r\n          {this.state.filmPairs.map((filmPair) => {\r\n           return <FilmPair pair={filmPair.pair} key={filmPair.id} />\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pairs;\r\n","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter, faGithub } from '@fortawesome/free-brands-svg-icons';\r\n\r\nclass Footer extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <footer>\r\n\r\n        <section className='team-info'>\r\n\r\n          <p className='team-made'>Made with <span className='heart' aria-label='love'>♥</span> by <span className='team-group'>The Film Four</span></p>\r\n          <ul className='team-members'>\r\n            <ul className='team-member'>\r\n              <li className='team-name'>Eyel</li>\r\n              <ul className='team-social'>  \r\n                <li>\r\n                  <a href='https://github.com/csmordido' title=\"Click to access Eyel's Github page\" target='_blank'>\r\n                    <FontAwesomeIcon \r\n                      icon={faGithub}\r\n                      />\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href='https://twitter.com/eyel_mordido' title=\"Click to access Eyel's Twitter page\" target='_blank'>\r\n                    <FontAwesomeIcon\r\n                      icon={faTwitter}\r\n                    />\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </ul>\r\n            <ul className='team-member'>\r\n              <li className='team-name'>Melissa</li>\r\n              <ul className='team-social'>\r\n                <li>\r\n                  <a href='https://github.com/mel-ahls' title=\"Click to access Melissa's Github page\" target='_blank'>\r\n                    <FontAwesomeIcon\r\n                      icon={faGithub}\r\n                      />\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href='https://twitter.com/mel_ahls' title=\"Click to access Melissa's Twitter page\" target='_blank'>\r\n                    <FontAwesomeIcon\r\n                      icon={faTwitter}\r\n                    />\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </ul>\r\n            <ul className='team-member'>\r\n              <li className='team-name'>Robert</li>\r\n              <ul className='team-social'>\r\n                <li>\r\n                  <a href='https://github.com/rduhig' title=\"Click to access Robert's Github page\" target='_blank'>\r\n                    <FontAwesomeIcon\r\n                      icon={faGithub}\r\n                      />\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href='https://twitter.com/robert_duhig' title=\"Click to access Robert's Twitter page\" target='_blank'>\r\n                    <FontAwesomeIcon\r\n                      icon={faTwitter}\r\n                    />\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </ul>\r\n            <ul className='team-member'>\r\n              <li className='team-name'>Taylor</li>\r\n              <ul className='team-social'>\r\n                <li>\r\n                  <a href='https://github.com/QuercusTaliare' title=\"Click to access Taylor's Github page\" target='_blank'>\r\n                    <FontAwesomeIcon\r\n                      icon={faGithub}\r\n                      />\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a href='https://twitter.com/taylorRdev' title=\"Click to access Taylor's Twitter page\" target='_blank'>\r\n                    <FontAwesomeIcon\r\n                      icon={faTwitter}\r\n                    />\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </ul>\r\n          </ul>\r\n        </section>\r\n\r\n        <section className='attributions'>\r\n          <p>All films provided by <a href='https://www.themoviedb.org/documentation/api'>The Movie DB API</a></p>\r\n          <p>All icons provided by <a href='https://fontawesome.com/license'>Font Awesome</a> and <a href='http://www.freepik.com/' title='Freepik'>Freepik</a></p>\r\n        </section>\r\n        \r\n      </footer>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nimport Header from './components/Header';\r\nimport Search from './components/Search';\r\nimport CurrentPair from './components/CurrentPair';\r\nimport Pairs from './components/Pairs';\r\nimport Footer from './components/Footer';\r\n\r\nclass App extends Component {\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      englishFilm: {},\r\n      foreignFilm: {}\r\n    };\r\n    this.SearchRef = React.createRef();\r\n    this.CurrentPairRef = React.createRef();\r\n    this.PairsRef = React.createRef();\r\n  }\r\n\r\n  /**\r\n   * Updates the state to contain the selected English language film\r\n   * \r\n   * @param {Object} filmObj An Object representing the selected film\r\n   */\r\n  updateEnglishFilmState = (filmObj) => {\r\n    this.setState({ englishFilm: filmObj });\r\n  };\r\n\r\n  /**\r\n   * Updates the state to contain the selected foreign language film\r\n   * \r\n   * @param {Object} filmObj An Object representing the selected film\r\n   */\r\n  updateForeignFilmState = (filmObj) => {\r\n    this.setState({ foreignFilm: filmObj });\r\n  };\r\n\r\n  /**\r\n   * Scrolls the Window to the Search component\r\n   */\r\n  scrollToSearch = () => {\r\n    window.scrollTo(0, this.SearchRef.current.offsetTop);\r\n  };\r\n\r\n  /**\r\n   * Scrolls the Window to the CurrentPair component\r\n   */\r\n  scrollToCurrentPair = () => {\r\n    window.scrollTo(0, this.CurrentPairRef.current.offsetTop)\r\n  }\r\n\r\n  /** \r\n   * Scrolls the Window to the Pairs component\r\n   */\r\n  scrollToPairs = () => {\r\n    window.scrollTo(0, this.PairsRef.current.offsetTop);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Header scrollToSearch={this.scrollToSearch} />\r\n        <main>\r\n          <Search\r\n            englishFilm={this.state.englishFilm}\r\n            updateEnglishFilmState={this.updateEnglishFilmState}\r\n            updateForeignFilmState={this.updateForeignFilmState}\r\n            SearchRef={this.SearchRef}\r\n          />\r\n          { // The CurrentPair component will not be rendered unless the englishFilm and foreignFilm objects in state have something inside\r\n            (Object.keys(this.state.englishFilm).length !== 0 && Object.keys(this.state.foreignFilm).length !== 0)\r\n            && <CurrentPair\r\n              englishFilm={this.state.englishFilm}\r\n              foreignFilm={this.state.foreignFilm}\r\n              updateEnglishFilmState={this.updateEnglishFilmState}\r\n              updateForeignFilmState={this.updateForeignFilmState}\r\n              scrollToPairs={this.scrollToPairs}\r\n              scrollToSearch={this.scrollToSearch}\r\n              CurrentPairRef={this.CurrentPairRef}\r\n              scrollToCurrentPair={this.scrollToCurrentPair}\r\n            />\r\n          }\r\n          <Pairs PairsRef={this.PairsRef} />\r\n        </main>\r\n        <Footer />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './style.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}